datasource db {
  provider = "postgres" 
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  password     String?
  googleId     String?  @unique
  refreshToken String?  
  image        String?  
  role         Role     @default(USER)
  emailVerified DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  accounts     Account[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete:Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  discountPrice   Float?
  discountPercent Int?              
  inStock         Boolean           @default(true)
  sku             String?           @unique
  brand           String?
  category        String?
  colors          Color[]
  sizes           Size[]
  images          ProductImage[]
  reviews         Review[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  offer           Offer?            @relation(fields: [offerId], references: [id])
  offerId         Int?   @unique

  orderItems      OrderItem[]
}

model Color {
  id        Int      @id @default(autoincrement())
  name      String  
  hexValue  String?  
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Size {
  id        Int      @id @default(autoincrement())
  name      String   // XS, S, M, L, XL
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}
 
model Offer {
  id             Int      @id @default(autoincrement())
  priceCurrency  String   @default("USD")
  priceValidUntil DateTime?
  condition      String?  // NewCondition أو UsedCondition
  seller         String?
  returnDays     Int?     @default(30)
  freeShipping   Boolean  @default(true)
  product        Product?
}

model Review {
  id           Int      @id @default(autoincrement())
  rating       Float
  comment      String?
  author       String?
  product      Product  @relation(fields: [productId], references: [id])
  productId    Int
  createdAt    DateTime @default(now())
}

model Order {
  id               Int          @id @default(autoincrement())
  userId           String
  subtotal         Float        @default(0)
  shipping         Float        @default(0)
  total            Float        @default(0)
  couponCode       String?
  couponDiscount   Float?       @default(0)
  paymentMethod    String       // "bank" أو "cash_on_delivery"
  status           String       @default("pending") // pending, paid, shipped, delivered, cancelled
  // تفاصيل الفوترينج (Billing Details)
  billingFirstName String
  billingLastName  String?
  billingCompany   String?
  billingStreet    String
  billingApartment String?     // الشقة أو الطابق
  billingCity      String
  billingPhone     String
  billingEmail     String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  user         User         @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @default(1)
  price     Float   // سعر المنتج وقت الطلب (للحفاظ على السعر حتى لو تغير)

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}



// العلاقة	الشرح
// User ↔ Order	المستخدم ممكن يعمل أكتر من طلب
// Order ↔ OrderItem	الطلب يحتوي على عناصر (منتجات متعددة)
// Product ↔ OrderItem	المنتج ممكن يكون في أكتر من طلب
// Product ↔ Color / Size / Image / Review	المنتج له ألوان ومقاسات وصور وتقييمات
// Product ↔ Offer	علاقة واحد لواحد (منتج واحد له عرض واحد فقط)